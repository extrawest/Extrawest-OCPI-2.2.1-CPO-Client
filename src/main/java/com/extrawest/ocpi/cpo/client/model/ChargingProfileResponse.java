/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.extrawest.ocpi.cpo.client.model;

import com.fasterxml.jackson.annotation.*;

import java.util.Objects;

/**
 * ChargingProfileResponse
 */
@JsonPropertyOrder({
        ChargingProfileResponse.JSON_PROPERTY_RESULT,
        ChargingProfileResponse.JSON_PROPERTY_TIMEOUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-23T13:23:59.711846+02:00[Europe/Kiev]")
public class ChargingProfileResponse {
    public static final String JSON_PROPERTY_RESULT = "result";
    public static final String JSON_PROPERTY_TIMEOUT = "timeout";
    private ResultEnum result;
    private Integer timeout;
    public ChargingProfileResponse() {
    }

    public ChargingProfileResponse result(ResultEnum result) {

        this.result = result;
        return this;
    }

    /**
     * Get result
     *
     * @return result
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RESULT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ResultEnum getResult() {
        return result;
    }

    @JsonProperty(JSON_PROPERTY_RESULT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResult(ResultEnum result) {
        this.result = result;
    }

    public ChargingProfileResponse timeout(Integer timeout) {

        this.timeout = timeout;
        return this;
    }

    /**
     * Get timeout
     *
     * @return timeout
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getTimeout() {
        return timeout;
    }

    @JsonProperty(JSON_PROPERTY_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimeout(Integer timeout) {
        this.timeout = timeout;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChargingProfileResponse chargingProfileResponse = (ChargingProfileResponse) o;
        return Objects.equals(this.result, chargingProfileResponse.result) &&
                Objects.equals(this.timeout, chargingProfileResponse.timeout);
    }

    @Override
    public int hashCode() {
        return Objects.hash(result, timeout);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChargingProfileResponse {\n");
        sb.append("    result: ").append(toIndentedString(result)).append("\n");
        sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets result
     */
    public enum ResultEnum {
        ACCEPTED("ACCEPTED"),

        NOT_SUPPORTED("NOT_SUPPORTED"),

        REJECTED("REJECTED"),

        TOO_OFTEN("TOO_OFTEN"),

        UNKNOWN_SESSION("UNKNOWN_SESSION");

        private String value;

        ResultEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ResultEnum fromValue(String value) {
            for (ResultEnum b : ResultEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

