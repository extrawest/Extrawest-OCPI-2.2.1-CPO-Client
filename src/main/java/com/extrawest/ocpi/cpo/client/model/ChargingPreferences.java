/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.extrawest.ocpi.cpo.client.model;

import com.fasterxml.jackson.annotation.*;

import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * ChargingPreferences
 */
@JsonPropertyOrder({
        ChargingPreferences.JSON_PROPERTY_PROFILE_TYPE,
        ChargingPreferences.JSON_PROPERTY_DEPARTURE_TIME,
        ChargingPreferences.JSON_PROPERTY_ENERGY_NEED,
        ChargingPreferences.JSON_PROPERTY_DISCHARGE_ALLOWED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-23T13:23:59.711846+02:00[Europe/Kiev]")
public class ChargingPreferences {
    public static final String JSON_PROPERTY_PROFILE_TYPE = "profile_type";
    public static final String JSON_PROPERTY_DEPARTURE_TIME = "departure_time";
    public static final String JSON_PROPERTY_ENERGY_NEED = "energy_need";
    public static final String JSON_PROPERTY_DISCHARGE_ALLOWED = "discharge_allowed";
    private ProfileTypeEnum profileType;
    private OffsetDateTime departureTime;
    private Float energyNeed;
    private Boolean dischargeAllowed;
    public ChargingPreferences() {
    }

    public ChargingPreferences profileType(ProfileTypeEnum profileType) {

        this.profileType = profileType;
        return this;
    }

    /**
     * Get profileType
     *
     * @return profileType
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_PROFILE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ProfileTypeEnum getProfileType() {
        return profileType;
    }

    @JsonProperty(JSON_PROPERTY_PROFILE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProfileType(ProfileTypeEnum profileType) {
        this.profileType = profileType;
    }

    public ChargingPreferences departureTime(OffsetDateTime departureTime) {

        this.departureTime = departureTime;
        return this;
    }

    /**
     * Get departureTime
     *
     * @return departureTime
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DEPARTURE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public OffsetDateTime getDepartureTime() {
        return departureTime;
    }

    @JsonProperty(JSON_PROPERTY_DEPARTURE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDepartureTime(OffsetDateTime departureTime) {
        this.departureTime = departureTime;
    }

    public ChargingPreferences energyNeed(Float energyNeed) {

        this.energyNeed = energyNeed;
        return this;
    }

    /**
     * Get energyNeed
     *
     * @return energyNeed
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ENERGY_NEED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Float getEnergyNeed() {
        return energyNeed;
    }

    @JsonProperty(JSON_PROPERTY_ENERGY_NEED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEnergyNeed(Float energyNeed) {
        this.energyNeed = energyNeed;
    }

    public ChargingPreferences dischargeAllowed(Boolean dischargeAllowed) {

        this.dischargeAllowed = dischargeAllowed;
        return this;
    }

    /**
     * Get dischargeAllowed
     *
     * @return dischargeAllowed
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DISCHARGE_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getDischargeAllowed() {
        return dischargeAllowed;
    }

    @JsonProperty(JSON_PROPERTY_DISCHARGE_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDischargeAllowed(Boolean dischargeAllowed) {
        this.dischargeAllowed = dischargeAllowed;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChargingPreferences chargingPreferences = (ChargingPreferences) o;
        return Objects.equals(this.profileType, chargingPreferences.profileType) &&
                Objects.equals(this.departureTime, chargingPreferences.departureTime) &&
                Objects.equals(this.energyNeed, chargingPreferences.energyNeed) &&
                Objects.equals(this.dischargeAllowed, chargingPreferences.dischargeAllowed);
    }

    @Override
    public int hashCode() {
        return Objects.hash(profileType, departureTime, energyNeed, dischargeAllowed);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChargingPreferences {\n");
        sb.append("    profileType: ").append(toIndentedString(profileType)).append("\n");
        sb.append("    departureTime: ").append(toIndentedString(departureTime)).append("\n");
        sb.append("    energyNeed: ").append(toIndentedString(energyNeed)).append("\n");
        sb.append("    dischargeAllowed: ").append(toIndentedString(dischargeAllowed)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets profileType
     */
    public enum ProfileTypeEnum {
        CHEAP("CHEAP"),

        FAST("FAST"),

        GREEN("GREEN"),

        REGULAR("REGULAR");

        private String value;

        ProfileTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ProfileTypeEnum fromValue(String value) {
            for (ProfileTypeEnum b : ProfileTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

}

